{"version":3,"sources":["index.js"],"names":["endsWithOperators","endsWithDoubleSign","endsWithDecimal","App","props","handleClick","buttonName","currentNum","state","equation","evaluated","length","setTimeout","setState","test","slice","includes","delNum","answer","Math","round","eval","id","UpperDisplay","this","LowerDisplay","className","Keypad","value","React","Component","displayValue","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8aeca3ab.chunk.js","sourcesContent":["/* eslint-disable no-eval */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst endsWithOperators = /[-/*+]$/;\nconst endsWithDoubleSign = /[/*+]-$/;\nconst endsWithDecimal = /.$/\n\nclass App extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n            currentNum: \"0\",\n            equation: \"\",\n            evaluated: false\n        }\n    }\n\n    handleClick = buttonName => {\n        let currentNum = this.state.currentNum;\n        let equation = this.state.equation;\n        let evaluated = this.state.evaluated;\n        \n\n        switch(true) {\n            case buttonName === \"0\" :\n                    if(equation.length >= 15) {\n                        currentNum = \"Maximum Digits!\"\n                        setTimeout(() => this.setState({ currentNum: this.state.equation }), 1000);\n                    }else if(evaluated){\n                        equation = buttonName;\n                        currentNum = buttonName;\n                    }else if(endsWithOperators.test(equation)){\n                        equation += buttonName\n                        currentNum = buttonName\n                    }else if(endsWithDecimal.test(equation)){\n                        equation += buttonName\n                        currentNum += buttonName\n                    }\n                    else {\n                        currentNum += buttonName;\n                        equation += buttonName\n                    }  \n            break;\n            case buttonName === \"1\" ||\n                 buttonName === \"2\" ||\n                 buttonName === \"3\" ||\n                 buttonName === \"4\" ||\n                 buttonName === \"5\" ||\n                 buttonName === \"6\" ||\n                 buttonName === \"7\" ||\n                 buttonName === \"8\" ||\n                 buttonName === \"9\" :\n                 if(currentNum === \"0\" || endsWithOperators.test(currentNum) === true){\n                    currentNum = currentNum.slice(0, currentNum.length - 1)\n                }\n                 if(equation.length >= 15) {\n                        currentNum = \"Maximum Digits!\"\n                        setTimeout(() => this.setState({ currentNum: this.state.equation }), 1000);\n                    }else if(evaluated){\n                        equation = buttonName;\n                        currentNum = buttonName;\n                        evaluated = false; // after equal sign everything is clear\n                   \n                   }else {\n                        equation += buttonName\n                        currentNum += buttonName;\n                   }\n            break;\n            case buttonName === \"+\" ||\n                 buttonName === \"*\" ||\n                 buttonName === \"/\" :\n                    if(endsWithDoubleSign.test(equation)){\n                        equation = equation.slice(0, equation.length - 2)\n                        currentNum = buttonName\n                    }\n                    if(endsWithOperators.test(equation)){\n                        equation = equation.slice(0, equation.length - 1)\n                        currentNum = buttonName\n                     }\n                     if(equation.length >= 15) {\n                        currentNum = \"Maximum Digits!\"\n                        setTimeout(() => this.setState({ currentNum: this.state.equation }), 1000);\n                     }else if(evaluated){\n                        equation = currentNum + buttonName;\n                        currentNum = buttonName;\n                        evaluated = false; \n                    }else {\n                        equation += buttonName\n                        currentNum = buttonName\n                    }\n                    \n            break;\n            case buttonName === \"-\":\n                    if(endsWithDoubleSign.test(equation)){\n                        equation = equation.slice(0, equation.length - 2)\n                        currentNum = buttonName\n                    }\n                    if(equation.length >= 15) {\n                        currentNum = \"Maximum Digits!\"\n                        setTimeout(() => this.setState({ currentNum: this.state.equation }), 1000);\n                    }else if(evaluated){\n                        equation = currentNum + buttonName;\n                        currentNum = buttonName;\n                        evaluated = false; \n                    }else {\n                        equation += buttonName\n                        currentNum = buttonName\n                }\n            break;\n            case buttonName === \".\" :\n                if(equation.length >= 15) {\n                    currentNum = \"Maximum Digits!\"\n                    setTimeout(() => this.setState({ currentNum: this.state.equation }), 1000);\n                }else if(evaluated){\n                    equation = \"0\"\n                    currentNum = \"0\"\n                }else if(endsWithOperators.test(equation)){\n                    equation += \"0\"\n                    currentNum = \"0\"\n                }else if(this.state.currentNum === \"0\" || equation === \"\"){\n                    equation = \"0.\"\n                    currentNum = \"0.\"\n                }\n                if (!currentNum.includes(\".\")) {\n                        equation += buttonName\n                        currentNum += buttonName;\n                        evaluated = false\n                    }\n            break;\n            case buttonName === \"DEL\":\n                if(equation.length > 1){\n                const delNum = equation.slice(0, equation.length - 1);\n                equation = delNum;\n                currentNum = delNum;\n            } else {\n                equation = \"\"\n                currentNum = \"0\"\n            }\n            break;\n            case buttonName === \"AC\" :\n                equation = \"\";\n                currentNum= \"0\";\n            break;\n            case buttonName === \"=\" :\n                if (endsWithOperators.test(equation)){\n                currentNum = this.state.currentNum\n                }if(equation.length >= 15) {\n                    const answer = Math.round(1000000000000 * eval(equation)) / 1000000000000\n                    equation = answer\n                    currentNum = answer\n                    evaluated = true\n                }else {\n                    const answer = Math.round(1000000000000 * eval(equation)) / 1000000000000\n                    equation = equation + buttonName + answer\n                    currentNum = answer\n                    evaluated = true\n               }\n            break;\n            default :\n            currentNum = \"0\"\n\n        }\n        this.setState({currentNum});\n        this.setState({equation});\n        this.setState({evaluated});\n    }\n       \nrender() {\n   \n    return (\n        <div id=\"container\">\n            <div id=\"calculator\">\n                <div id=\"Screen\">\n                    <UpperDisplay equation={this.state.equation}/>\n                    <LowerDisplay currentNum={this.state.currentNum} />\n                </div>\n                <div id=\"keypads\">\n                    <div className=\"row\">\n                        <Keypad id=\"clear\" value=\"AC\" handleClick={this.handleClick}/>\n                        <Keypad id=\"delete\" value=\"DEL\" handleClick={this.handleClick}/>\n                    </div>\n                    <div className=\"row\">\n                        <Keypad id=\"seven\" value=\"7\" handleClick={this.handleClick}/>\n                        <Keypad id=\"eight\" value=\"8\" handleClick={this.handleClick}/>\n                        <Keypad id=\"nine\" value=\"9\" handleClick={this.handleClick}/>\n                        <Keypad id=\"divide\" value=\"/\" handleClick={this.handleClick}/>\n                    </div>\n                    <div className=\"row\">\n                        <Keypad id=\"four\" value=\"4\" handleClick={this.handleClick}/>\n                        <Keypad id=\"five\" value=\"5\" handleClick={this.handleClick}/>\n                        <Keypad id=\"six\" value=\"6\" handleClick={this.handleClick}/>\n                        <Keypad id=\"multiply\" value=\"*\" handleClick={this.handleClick}/>\n                    </div>\n                    <div className=\"row\">\n                        <Keypad id=\"one\" value=\"1\" handleClick={this.handleClick}/>\n                        <Keypad id=\"two\" value=\"2\" handleClick={this.handleClick}/>\n                        <Keypad id=\"three\" value=\"3\" handleClick={this.handleClick}/>\n                        <Keypad id=\"subtract\" value=\"-\" handleClick={this.handleClick}/>\n                    </div>\n                    <div className=\"row\">\n                        <Keypad id=\"decimal\" value=\".\" handleClick={this.handleClick}/>\n                        <Keypad id=\"zero\" value=\"0\" handleClick={this.handleClick}/>\n                        <Keypad id=\"equals\" value=\"=\" handleClick={this.handleClick}/>\n                        <Keypad id=\"add\" value=\"+\" handleClick={this.handleClick}/> \n                    </div>  \n                </div>\n            </div>\n\n        </div>\n        \n    )\n}        \n}\n\nclass Keypad extends React.Component {\n    \n    displayValue = () => {\n        this.props.handleClick(this.props.value)\n    }\n   \n    render() {\n        return(\n        <button id={this.props.id} onClick={this.displayValue}>{this.props.value}</button>  \n        )\n    }\n}\n\nclass UpperDisplay extends React.Component {\n    render() {\n        return(\n        <div id=\"equationScreen\">{this.props.equation}</div>\n        )\n    }\n}\n\nclass LowerDisplay extends React.Component {\n    render() {\n        return(\n        <div id=\"display\">{this.props.currentNum}</div>\n        )\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}